#include <bits/stdc++.h>


using namespace std;

/**
随着智能手机的日益普及,人们对无线网的需求日益增大。某城市决定对城市内的公共场所覆盖无线网。
假设该城市的布局为由严格平行的 129 条东西向街道和 129 条南北向街道所形成的网格状,并且相邻的平行街道之间的距离都是恒定值 1。
 东西向街道从北到南依次编号为 0,1,2...128,南北向街道从西到东依次编号为 0,1,2...128。
东西向街道和南北向街道相交形成路口,规定编号为 x 的南北向街道和编号为 y 的东西 向街道形成的路口的坐标是(x, y)。
 在某些路口存在一定数量的公共场所。
由于政府财政问题,只能安装一个大型无线网络发射器。该无线网络发射器的传播范围 是一个以该点为中心,边长为 2*d 的正方形。传播范围包括正方形边界。
例如下图是一个 d = 1 的无线网络发射器的覆盖范围示意图。
现在政府有关部门准备安装一个传播参数为 d 的无线网络发射器,希望你帮助他们在城 市内找出合适的安装地点,使得覆盖的公共场所最多。
输入格式:
第一行包含一个整数 d,表示无线网络发射器的传播距离。
第二行包含一个整数 n,表示有公共场所的路口数目。
接下来 n 行,每行给出三个整数 x, y, k, 中间用一个空格隔开,分别代表路口的坐标(x, y)以及该路口公共场所的数量。同一坐标只会给出一次。
输出格式:
输出一行,包含两个整数,用一个空格隔开,分别表示能覆盖最多公共场所的安装地点方案数,以及能覆盖的最多公共场所的数量。
限制:
对于100%的数据,1 ≤ d ≤ 20,1 ≤ n ≤ 20,0 ≤ x ≤ 128,0 ≤ y ≤ 128,0<k ≤1,000,000。
样例 1 :
输入:
1
2
4 4 10
6 6 20
输出:
1 30
 */
struct Pos {
    int x;
    int y;
    int k;
    Pos(int x, int y, int k): x(x),y(y),k(k) {}
};
int main()
{
    int D,N,grid[130][130],x,y,k;
    vector<Pos> vct;
    cin >> D >> N;
    for (int i=0;i<N;i++) {
        cin >> x >> y >> k;
        vct.push_back(Pos(x,y,k));
    }
    int maxx=0;
    for (int i=0;i<129;i++) {
        for (int j=0;j<129;j++) {
            int cnt1=0; // 在范围内的公共场所数量和
            for (int l=0;l<vct.size();l++) { // 遍历所有公共场所，如果在范围内则加上k
                if (abs(vct[l].x-i)<=D&&abs(vct[l].y-j)<=D) { // 在范围内
                    cnt1+=vct[l].k;
                }
            }
            grid[i][j]=cnt1;
            // 对每个点，更新最大记录
            if (cnt1>maxx) {
                maxx=cnt1;
            }
        }
    }
    int total=0;
    for (int i=0;i<129;i++) {
        for (int j=0;j<129;j++) {
            if (grid[i][j]==maxx) total++;
        }
    }
    cout << total << " " << maxx;
    return 0;
}
