#include <bits/stdc++.h>


using namespace std;

/**
在桌面上有一排硬币，共N枚，每一枚硬币均为正面朝上。
现在要把所有的硬币翻转成反面朝上，规则是每次可翻转任意N-1枚硬币（正面向上的被翻转为反面向上，反之亦然）。
求一个最短的操作序列（将每次翻转N-1枚硬币成为一次操作）。
输入格式:
输入只有一行，包含一个自然数N（N为不大于100的偶数）。
输出格式:
输出文件的第一行包含一个整数S，表示最少需要的操作次数。
接下来的S行每行分别表示每次操作后桌上硬币的状态（一行包含N个整数（0或1），
表示每个硬币的状态：0——正面向上，和1——反面向上，不允许出现多余空格）。
对于有多种操作方案的情况，则只需输出一种。
限制:
对于100%的数据，1≤n≤100，1≤m≤100。
样例 1 :
输入:
4
输出:
4
0111
1100
0001
1111
 */

int main()
{
    // 思路： 此题是一道脑筋急转弯或者推理能解决的水题
    // 1. 翻转n-1个币可以理解每次只能翻一个币， 那肯定最短操作序列就是n，翻n次刚好解决问题
    // 2. 怎么翻的问题，查看可知每次都可以保留1个不翻，从1推到n就可以了， 就是题解
    int N;
    cin >> N;
    cout << N << "\n";
    string s;
    for (int i=0;i<N;i++) {
        s+='0';
    }
    for (int i=0;i<N;i++) {
        for (int j=0;j<N;j++) {
            if (j!=i) {
                if (s[j]=='0') s[j]='1';
                else s[j]='0';
            }
        }
        cout << s << "\n";
    }
    return 0;
}
