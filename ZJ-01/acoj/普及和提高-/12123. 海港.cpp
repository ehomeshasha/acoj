#include <bits/stdc++.h>


using namespace std;

/**
小K是一个海港的海关工作人员，每天都有许多船只到达海港，船上通常有很多来自不同国家的乘客。
小K对这些到达海港的船只非常感兴趣，他按照时间记录下了到达海港的每一艘船只情况；
对于第i艘到达的船，他记录了这艘船到达的时间ti (单位：秒)，船上的乘 客数星ki，以及每名乘客的国籍 x(i,1), x(i,2),…，x(i,k);。
小K统计了n艘船的信息，希望你帮忙计算出以每一艘船到达时间为止的24小时(24小时=86400秒）内所有乘船到达的乘客来自多少个不同的国家。
形式化地讲，你需要计算n条信息。对于输出的第i条信息，你需要统计满足 ti - 86400 < tp <= ti的船只p，在所有的x(p,j)中，总共有多少个不同的数。
第一行输入一个正整数n，表示小K统计了 n艘船的信息。
接下来n行，每行描述一艘船的信息：前两个整数ti和ki分别表示这艘船到达海港的时间和船上的乘客数量，接下来ki个整数x(i,j)表示船上乘客的国7。
保证输入的ti是递增的，单位是秒；表示从小K第一次上班开始计时，这艘船在第 ti 秒到达海港。
保证 ， ，， 。
其中表示所有的ki的和。
输出格式：
输出n行，第i行输出一个整数表示第i艘船到达后的统计信息。
输入格式:
输出格式:
样例 1 :
输入:
3
1 4 4 1 2 2
2 2 2 3
10 1 3
输出:
3
4
4
说明:
第一艘船在第1秒到达海港，最近24小时到达的船是第一艘船，共有4个乘客， 分别是来自国家4,1,2,2，共来自3个不同的国家；
第二艘船在第2秒到达海港，最近24小时到达的船是第一艘船和第二艘船，共有 4 + 2 = 6个乘客，分别是来自国家4,1,2,2,2,3，共来自4个不同的国家；
第三艘船在第10秒到达海港，最近24小时到达的船是第一艘船、第二艘船和第 三艘船，共有4+ 2+1=7个乘客，分别是来自国家4,1,2,2,2,3,3，共来自4个不同 的国家。
样例 2 :
输入:
4
1 4 1 2 2 3
3 2 2 3
86401 2 3 4
86402 1 5
输出:
3
3
3
4
说明:
第一艘船在第1秒到达海港，最近24小时到达的船是第一艘船，共有4个乘客，分别是来自国家1,2,2,3，共来自3个不同的国家。
第二艘船在第3秒到达海港，最近24小时到达的船是第一艘船和第二艘船，共有4+2=6个乘客，分别是来自国家1,2,2,3,2,3，共来自3个不同的国家。
第三艘船在第86401秒到达海港，最近24小时到达的船是第二艘船和第三艘船，共有2+2=4个乘客，分别是来自国家2,3,3,4，共来自3个不同的国家。
第四艘船在第86402秒到达海港，最近24小时到达的船是第二艘船、第三艘船和第四艘船，共有2+2+1=5个乘客，分别是来自国家2,3,3,4,5，共来自4个不同的国家。
 */
struct Ship {
    int t;
    vector<int> people;
};
Ship ships[200000];
int GJ[200000]={0};
int main()
{
    int N,s,s_i=0,ans=0,idx=0;
    char tc[4];
    scanf("%d",&N);
    gets(tc);
    for (int i=0;i<N;i++) {
        int t,n,t2,t3;
        scanf("%d %d",&t,&n);
        vector<int> p;
        for (int j=0;j<n;j++) {
            scanf("%d",&t2);
            p.push_back(t2);
            if (GJ[t2]==0) ans++;
            GJ[t2]++;
        }
        ships[idx++]=Ship{t,p};

        if (i==0) s=t;
        if (t-s>=86400) {
            s=t-86400;
            int last_s_i=s_i;
            for (int j=s_i;j<=i;j++) {
                if (ships[j].t>s) {
                    s_i=j;
                    break;
                }
            } // 维护s_i
            // 依据s_i进行删除
            for (int j=last_s_i;j<s_i;j++) {
                for (int k=0;k<ships[j].people.size();k++) {
                    t3=ships[j].people[k];
                    GJ[t3]--;
                    if (GJ[t3]==0) ans--;
                }
            }
        }
        printf("%d\n",ans);
        // 删除不必要的船

    }
    return 0;
}
