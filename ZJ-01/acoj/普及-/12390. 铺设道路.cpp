#include <iostream>
#include <math.h>
#include <algorithm>

using namespace std;

/**
春春是一名道路工程师，负责铺设一条长度为n的道路。
铺设道路的主要工作是填平下陷的地表。整段道路可以看作是n块首尾相连的区域，一开始，第i块区域下陷的深度为di。
春春每天可以选择一段连续区间[L,R]，填充这段区间中的每块区域，让其下陷深度减少1。在选择区间时，需要保证，区间内的每块区域在填充前下陷深度均不为0。
春春希望你能帮他设计一种方案，可以在最短的时间内将整段道路的下陷深度都变为0。
输入格式:
输入文件包含两行，第一行包含一个整数n，表示道路的长度。
第二行包含n个整数，相邻两数间用一个空格隔开，第i个整数为di。
输出格式:
输出文件仅包含一个整数，即最少需要多少天才能完成任务。
限制:
对于30%的数据，1≤n≤10；
对于70%的数据，1≤n≤1000；
对于100%的数据，1≤n≤100000，0≤di≤10000。
样例 1 :
输入:
6
4 3 2 5 3 5
输出:
9
说明:
一种可行的最佳方案是，依次选择：
[1,6]、[1,6]、[1,2]、[1,1]、[4,6]、[4,4]、[4,4]、[6,6]、[6,6]。
 */
int n,di,h=0,ds=0;
int main()
{
    cin >> n;
    for (int i=1;i<=n;i++) {
        cin >> di;
        if (di>h)
            ds+=di-h;
        h=di;
    }
    cout << ds << endl;

    return 0;
}
