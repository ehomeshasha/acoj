#include <bits/stdc++.h>


using namespace std;

/**
林克有一块草地，他的草地可以被看作是一个由正方形方格组成的巨大的二维方阵（想象一个巨大的棋盘）。初始时，草地上是空的。
林克将会逐一地将 N（1≤N≤10^5）头羊加入到草地上。第 i头羊将会占据方格 (xi,yi)，不同于所有已经被其他羊占据的方格（0≤xi,yi≤1000）。
如果一头羊水平或竖直方向上恰好与三头其他羊相邻，那么这头羊被称为是「舒适的」。
林克对他的牧场上舒适的羊的数量感兴趣。对 1…N 中的每一个i，输出第 i头羊加入到草地上之后舒适的羊的数量。
输入格式:
输入的第一行包含一个整数 N。以下 N 行每行包含两个空格分隔的整数，表示一头羊所在的方格坐标 (x,y)。输入保证所有方格的坐标是不同的。
输出格式:
输出的第 i行包含前 i 头羊加入到草地上之后舒适的羊的数量。
样例 1 :

输入:
8
0 1
1 0
1 1
1 2
2 1
2 2
3 1
3 2
输出:
0
0
0
1
0
0
1
2
说明:
在前四头羊加入之后，位于 (1,1)的羊是舒适的。
在前七头羊加入之后，位于 (2,1)的羊是舒适的。
在前八头羊加入之后，位于 (2,1) 和 (2,2)的羊是舒适的。
 */
int box[1005][1005]={0},N,tx,ty,cnt=0,visit[1005][1005]={0};
void check1(int x, int y)
{
    // 如果当前位置没有羊直接跳出
    if (box[x][y]==0) return;
    int cnt1=0;
    // 检查相邻是否有羊，有羊+1
    // 上
    if (x>=1&&box[x-1][y]==1) cnt1++;
    // 右
    if (y<=998&&box[x][y+1]==1) cnt1++;
    // 下
    if (x<=998&&box[x+1][y]==1) cnt1++;
    // 左
    if (y>=1&&box[x][y-1]==1) cnt1++;
    int last_cnt=visit[x][y];
    visit[x][y]=cnt1;
    if (cnt1==3&&last_cnt!=3) cnt++; // 从不舒适变到舒适
    if (cnt1!=3&&last_cnt==3) cnt--; // 从舒适变到不舒适
}

void check(int x, int y)
{
    // 重新检查上下左右四个相邻位置羊是否舒适
    // 上
    if (x>=1) check1(x-1,y);
    // 右
    if (y<=998) check1(x,y+1);
    // 下
    if (x<=998) check1(x+1,y);
    // 左
    if (y>=1) check1(x,y-1);
    printf("%d\n",cnt);
}


int main()
{
    scanf("%d",&N);
    for (int i=1;i<=N;i++) {
        scanf("%d %d\n",&tx,&ty);
        box[tx][ty]=1;
        check(tx,ty);
    }


    return 0;
}
